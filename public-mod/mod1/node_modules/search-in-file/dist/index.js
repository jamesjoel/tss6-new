"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilesFromDir = exports.search = exports.fileSearch = void 0;
const fs_1 = require("fs");
const getFilesFromDir_1 = require("./getFilesFromDir");
Object.defineProperty(exports, "getFilesFromDir", { enumerable: true, get: function () { return getFilesFromDir_1.getFilesFromDir; } });
const fileSearch_1 = require("./fileSearch");
Object.defineProperty(exports, "search", { enumerable: true, get: function () { return fileSearch_1.search; } });
const { stat, access } = fs_1.promises;
/**
 * @param {string[]} paths file locations to search
 * @param {string} textToSearch Text to search in files
 * @param {object} options Various options for file search
 */
const fileSearch = async (paths, textToSearch, options) => {
    if (!paths || !paths.length)
        throw new Error('File path is required');
    if (!(paths instanceof Array))
        throw new Error('Path must be an array.');
    if (!options || !(options instanceof Object)) {
        options = {};
    }
    try {
        const filePromises = paths.map((p) => access(p));
        await Promise.all(filePromises);
    }
    catch (error) {
        throw new Error("One of the file path doesn't exists.");
    }
    const getFilesPromises = paths.map((p) => stat(p).then((stat) => {
        return !stat.isDirectory()
            ? [p]
            : (0, getFilesFromDir_1.getFilesFromDir)(p, options.recursive || false, true);
    }));
    const files = await Promise.all(getFilesPromises);
    let allFiles = files.reduce((result, fileArr) => {
        return result.concat(fileArr);
    }, []);
    if (options.ignoreDir && options.ignoreDir.length) {
        allFiles = allFiles.filter((filePath) => { var _a; return !((_a = options.ignoreDir) === null || _a === void 0 ? void 0 : _a.some((path) => path === filePath || filePath.includes(path))); });
    }
    if (options.fileMask) {
        allFiles = allFiles.filter((filePath) => {
            const filePathParts = filePath.split('.');
            const fileExt = filePathParts[filePathParts.length - 1];
            return fileExt === options.fileMask;
        });
    }
    if (!allFiles.length) {
        throw new Error('No file to search. Either there are no files or files are empty');
    }
    const promises = allFiles.map((path) => (0, fileSearch_1.readFileAndSearch)(path, textToSearch, options));
    const searchResults = (await Promise.all(promises));
    return searchResults.filter((results) => !!(results === null || results === void 0 ? void 0 : results.length));
};
exports.fileSearch = fileSearch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkJBQThCO0FBQzlCLHVEQUFvRDtBQXNFdkIsZ0dBdEVwQixpQ0FBZSxPQXNFb0I7QUFyRTVDLDZDQUF5RDtBQXFFcEMsdUZBckVPLG1CQUFNLE9BcUVQO0FBbEUzQixNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLGFBQVEsQ0FBQztBQUVsQzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUN0QixLQUFlLEVBQ2YsWUFBb0IsRUFDcEIsT0FBc0IsRUFDdEIsRUFBRTtJQUNGLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUN0RSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3pFLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzdDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN2QyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDeEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFFLElBQUEsaUNBQWUsRUFBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVMsSUFBSSxLQUFLLEVBQUUsSUFBSSxDQUF1QixDQUFDO0lBQ2xGLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUVsRCxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQzlDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxJQUFJLE9BQU8sQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsRCxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FDeEIsQ0FBQyxRQUFnQixFQUFFLEVBQUUsV0FDbkIsT0FBQSxDQUFDLENBQUEsTUFBQSxPQUFPLENBQUMsU0FBUywwQ0FBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUEsRUFBQSxDQUNuRixDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3JCLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1lBQzlDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEQsT0FBTyxPQUFPLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUVBQWlFLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFLENBQzdDLElBQUEsOEJBQWlCLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FDL0MsQ0FBQztJQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFnQyxDQUFDO0lBQ25GLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQWdDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUEsQ0FBQyxDQUFDO0FBQ3ZGLENBQUMsQ0FBQztBQUVPLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvbWlzZXMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGdldEZpbGVzRnJvbURpciB9IGZyb20gJy4vZ2V0RmlsZXNGcm9tRGlyJztcclxuaW1wb3J0IHsgcmVhZEZpbGVBbmRTZWFyY2gsIHNlYXJjaCB9IGZyb20gJy4vZmlsZVNlYXJjaCc7XHJcbmltcG9ydCB7IExpbmVSZXN1bHQsIFNlYXJjaE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmNvbnN0IHsgc3RhdCwgYWNjZXNzIH0gPSBwcm9taXNlcztcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBmaWxlIGxvY2F0aW9ucyB0byBzZWFyY2hcclxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRUb1NlYXJjaCBUZXh0IHRvIHNlYXJjaCBpbiBmaWxlc1xyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBWYXJpb3VzIG9wdGlvbnMgZm9yIGZpbGUgc2VhcmNoXHJcbiAqL1xyXG5jb25zdCBmaWxlU2VhcmNoID0gYXN5bmMgKFxyXG4gIHBhdGhzOiBzdHJpbmdbXSxcclxuICB0ZXh0VG9TZWFyY2g6IHN0cmluZyxcclxuICBvcHRpb25zOiBTZWFyY2hPcHRpb25zLFxyXG4pID0+IHtcclxuICBpZiAoIXBhdGhzIHx8ICFwYXRocy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignRmlsZSBwYXRoIGlzIHJlcXVpcmVkJyk7XHJcbiAgaWYgKCEocGF0aHMgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBFcnJvcignUGF0aCBtdXN0IGJlIGFuIGFycmF5LicpO1xyXG4gIGlmICghb3B0aW9ucyB8fCAhKG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICBvcHRpb25zID0ge307XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgZmlsZVByb21pc2VzID0gcGF0aHMubWFwKChwKSA9PiBhY2Nlc3MocCkpO1xyXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoZmlsZVByb21pc2VzKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT25lIG9mIHRoZSBmaWxlIHBhdGggZG9lc24ndCBleGlzdHMuXCIpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0RmlsZXNQcm9taXNlcyA9IHBhdGhzLm1hcCgocCkgPT5cclxuICAgIHN0YXQocCkudGhlbigoc3RhdCkgPT4ge1xyXG4gICAgICByZXR1cm4gIXN0YXQuaXNEaXJlY3RvcnkoKVxyXG4gICAgICAgID8gW3BdXHJcbiAgICAgICAgOiAoZ2V0RmlsZXNGcm9tRGlyKHAsIG9wdGlvbnMucmVjdXJzaXZlIHx8IGZhbHNlLCB0cnVlKSBhcyBQcm9taXNlPHN0cmluZ1tdPik7XHJcbiAgICB9KSxcclxuICApO1xyXG5cclxuICBjb25zdCBmaWxlcyA9IGF3YWl0IFByb21pc2UuYWxsKGdldEZpbGVzUHJvbWlzZXMpO1xyXG5cclxuICBsZXQgYWxsRmlsZXMgPSBmaWxlcy5yZWR1Y2UoKHJlc3VsdCwgZmlsZUFycikgPT4ge1xyXG4gICAgcmV0dXJuIHJlc3VsdC5jb25jYXQoZmlsZUFycik7XHJcbiAgfSwgW10pO1xyXG5cclxuICBpZiAob3B0aW9ucy5pZ25vcmVEaXIgJiYgb3B0aW9ucy5pZ25vcmVEaXIubGVuZ3RoKSB7XHJcbiAgICBhbGxGaWxlcyA9IGFsbEZpbGVzLmZpbHRlcihcclxuICAgICAgKGZpbGVQYXRoOiBzdHJpbmcpID0+XHJcbiAgICAgICAgIW9wdGlvbnMuaWdub3JlRGlyPy5zb21lKChwYXRoKSA9PiBwYXRoID09PSBmaWxlUGF0aCB8fCBmaWxlUGF0aC5pbmNsdWRlcyhwYXRoKSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdGlvbnMuZmlsZU1hc2spIHtcclxuICAgIGFsbEZpbGVzID0gYWxsRmlsZXMuZmlsdGVyKChmaWxlUGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZpbGVQYXRoUGFydHMgPSBmaWxlUGF0aC5zcGxpdCgnLicpO1xyXG4gICAgICBjb25zdCBmaWxlRXh0ID0gZmlsZVBhdGhQYXJ0c1tmaWxlUGF0aFBhcnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICByZXR1cm4gZmlsZUV4dCA9PT0gb3B0aW9ucy5maWxlTWFzaztcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFhbGxGaWxlcy5sZW5ndGgpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignTm8gZmlsZSB0byBzZWFyY2guIEVpdGhlciB0aGVyZSBhcmUgbm8gZmlsZXMgb3IgZmlsZXMgYXJlIGVtcHR5Jyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBwcm9taXNlcyA9IGFsbEZpbGVzLm1hcCgocGF0aDogc3RyaW5nKSA9PlxyXG4gICAgcmVhZEZpbGVBbmRTZWFyY2gocGF0aCwgdGV4dFRvU2VhcmNoLCBvcHRpb25zKSxcclxuICApO1xyXG5cclxuICBjb25zdCBzZWFyY2hSZXN1bHRzID0gKGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKSkgYXMgKHN0cmluZ1tdIHwgTGluZVJlc3VsdFtdKVtdO1xyXG4gIHJldHVybiBzZWFyY2hSZXN1bHRzLmZpbHRlcigocmVzdWx0czogc3RyaW5nW10gfCBMaW5lUmVzdWx0W10pID0+ICEhcmVzdWx0cz8ubGVuZ3RoKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IGZpbGVTZWFyY2gsIHNlYXJjaCwgZ2V0RmlsZXNGcm9tRGlyIH07XHJcbiJdfQ==