"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilesFromDir = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
// Using closure
const getFiles = async (path, omitEmpty) => {
    const files = [];
    const getFilesRecursively = async (path) => {
        const fileList = await (0, promises_1.readdir)(path);
        const fileStatPromises = fileList.map(function (file) {
            const filePath = (0, path_1.join)(path, file);
            return (0, promises_1.stat)(filePath).then((fileStat) => {
                if (fileStat.isDirectory())
                    return getFilesRecursively(filePath);
                if (omitEmpty)
                    return fileStat.size > 0 ? filePath : '';
                return filePath;
            });
        });
        const filesPaths = await Promise.all(fileStatPromises);
        const result = filesPaths.filter((file) => !!file);
        return files.concat(result);
    };
    return getFilesRecursively(path);
};
/**
 * @param {string} dirPath Path of the directory to get files from.
 * @param {boolean} recursive Get files recursively from directory.
 * @param {boolean} omitEmpty A flag to omit empty files from result.
 */
const getFilesFromDir = (dirPath, recursive, omitEmpty) => {
    if (!recursive) {
        return (0, promises_1.readdir)(dirPath).then((fileList) => {
            const fileStatPromises = fileList.map((file) => {
                const filePath = (0, path_1.join)(dirPath, file);
                return (0, promises_1.stat)(filePath).then((fileStat) => {
                    if (fileStat.isDirectory())
                        return false;
                    if (omitEmpty)
                        return fileStat.size > 0 ? filePath : false;
                    return filePath;
                });
            });
            return Promise.all(fileStatPromises).then((files) => files.filter((file) => file));
        });
    }
    return getFiles(dirPath, omitEmpty);
};
exports.getFilesFromDir = getFilesFromDir;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RmlsZXNGcm9tRGlyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dldEZpbGVzRnJvbURpci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwQ0FBNEM7QUFDNUMsK0JBQTRCO0FBRTVCLGdCQUFnQjtBQUNoQixNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFFLFNBQWtCLEVBQUUsRUFBRTtJQUMxRCxNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFFLEVBQUU7UUFDakQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLGtCQUFPLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxnQkFBZ0IsR0FBUSxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSTtZQUN2RCxNQUFNLFFBQVEsR0FBVyxJQUFBLFdBQUksRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUMsT0FBTyxJQUFBLGVBQUksRUFBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFlLEVBQU8sRUFBRTtnQkFDbEQsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO29CQUFFLE9BQU8sbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2pFLElBQUksU0FBUztvQkFBRSxPQUFPLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDeEQsT0FBTyxRQUFRLENBQUM7WUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sVUFBVSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUM7QUFFRjs7OztHQUlHO0FBQ0ksTUFBTSxlQUFlLEdBQUcsQ0FDN0IsT0FBZSxFQUNmLFNBQWtCLEVBQ2xCLFNBQWtCLEVBQ2xCLEVBQUU7SUFDRixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDZixPQUFPLElBQUEsa0JBQU8sRUFBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN4QyxNQUFNLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBQSxXQUFJLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLElBQUEsZUFBSSxFQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO29CQUN0QyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUU7d0JBQUUsT0FBTyxLQUFLLENBQUM7b0JBQ3pDLElBQUksU0FBUzt3QkFBRSxPQUFPLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDM0QsT0FBTyxRQUFRLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxRQUFRLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQW5CVyxRQUFBLGVBQWUsbUJBbUIxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRzIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBzdGF0LCByZWFkZGlyIH0gZnJvbSAnZnMvcHJvbWlzZXMnO1xyXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XHJcblxyXG4vLyBVc2luZyBjbG9zdXJlXHJcbmNvbnN0IGdldEZpbGVzID0gYXN5bmMgKHBhdGg6IHN0cmluZywgb21pdEVtcHR5OiBib29sZWFuKSA9PiB7XHJcbiAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gW107XHJcbiAgY29uc3QgZ2V0RmlsZXNSZWN1cnNpdmVseSA9IGFzeW5jIChwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgIGNvbnN0IGZpbGVMaXN0ID0gYXdhaXQgcmVhZGRpcihwYXRoKTtcclxuICAgIGNvbnN0IGZpbGVTdGF0UHJvbWlzZXM6IGFueSA9IGZpbGVMaXN0Lm1hcChmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICBjb25zdCBmaWxlUGF0aDogc3RyaW5nID0gam9pbihwYXRoLCBmaWxlKTtcclxuICAgICAgcmV0dXJuIHN0YXQoZmlsZVBhdGgpLnRoZW4oKGZpbGVTdGF0OiBTdGF0cyk6IGFueSA9PiB7XHJcbiAgICAgICAgaWYgKGZpbGVTdGF0LmlzRGlyZWN0b3J5KCkpIHJldHVybiBnZXRGaWxlc1JlY3Vyc2l2ZWx5KGZpbGVQYXRoKTtcclxuICAgICAgICBpZiAob21pdEVtcHR5KSByZXR1cm4gZmlsZVN0YXQuc2l6ZSA+IDAgPyBmaWxlUGF0aCA6ICcnO1xyXG4gICAgICAgIHJldHVybiBmaWxlUGF0aDtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGZpbGVzUGF0aHMgPSBhd2FpdCBQcm9taXNlLmFsbChmaWxlU3RhdFByb21pc2VzKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGZpbGVzUGF0aHMuZmlsdGVyKChmaWxlOiBzdHJpbmcpID0+ICEhZmlsZSk7XHJcbiAgICByZXR1cm4gZmlsZXMuY29uY2F0KHJlc3VsdCk7XHJcbiAgfTtcclxuICByZXR1cm4gZ2V0RmlsZXNSZWN1cnNpdmVseShwYXRoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlyUGF0aCBQYXRoIG9mIHRoZSBkaXJlY3RvcnkgdG8gZ2V0IGZpbGVzIGZyb20uXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjdXJzaXZlIEdldCBmaWxlcyByZWN1cnNpdmVseSBmcm9tIGRpcmVjdG9yeS5cclxuICogQHBhcmFtIHtib29sZWFufSBvbWl0RW1wdHkgQSBmbGFnIHRvIG9taXQgZW1wdHkgZmlsZXMgZnJvbSByZXN1bHQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0RmlsZXNGcm9tRGlyID0gKFxyXG4gIGRpclBhdGg6IHN0cmluZyxcclxuICByZWN1cnNpdmU6IGJvb2xlYW4sXHJcbiAgb21pdEVtcHR5OiBib29sZWFuLFxyXG4pID0+IHtcclxuICBpZiAoIXJlY3Vyc2l2ZSkge1xyXG4gICAgcmV0dXJuIHJlYWRkaXIoZGlyUGF0aCkudGhlbigoZmlsZUxpc3QpID0+IHtcclxuICAgICAgY29uc3QgZmlsZVN0YXRQcm9taXNlcyA9IGZpbGVMaXN0Lm1hcCgoZmlsZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gam9pbihkaXJQYXRoLCBmaWxlKTtcclxuICAgICAgICByZXR1cm4gc3RhdChmaWxlUGF0aCkudGhlbigoZmlsZVN0YXQpID0+IHtcclxuICAgICAgICAgIGlmIChmaWxlU3RhdC5pc0RpcmVjdG9yeSgpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICBpZiAob21pdEVtcHR5KSByZXR1cm4gZmlsZVN0YXQuc2l6ZSA+IDAgPyBmaWxlUGF0aCA6IGZhbHNlO1xyXG4gICAgICAgICAgcmV0dXJuIGZpbGVQYXRoO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGZpbGVTdGF0UHJvbWlzZXMpLnRoZW4oKGZpbGVzKSA9PiBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IGZpbGUpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gZ2V0RmlsZXMoZGlyUGF0aCwgb21pdEVtcHR5KTtcclxufTtcclxuIl19