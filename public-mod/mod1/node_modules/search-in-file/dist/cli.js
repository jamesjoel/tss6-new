#!/usr/bin/env node
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const _1 = require(".");
function concatValues(value, previous) {
    return previous.concat([value]);
}
const program = new commander_1.Command('search-in-file')
    .version('3.5.2')
    .arguments('<text-to-search>')
    .usage('<text-to-search> [options]')
    .action((text) => {
    program.textToSearch = text;
})
    .on('--help', () => {
    console.log();
    console.log('Only <text-to-search> is required');
})
    .option('-p, --path <path>', 'Path(s) of file/directory to search. Default: Current working directory', concatValues, [])
    .option('-w, --word', 'Search for exact word?', false)
    .option('-i, --ignore-case', 'Ignore case while searching?', false)
    .option('--reg', `Consider "text-to-search" as regex?`, false)
    .option('-r, --recursive', `Search recursively in sub-directories of a directory`, false)
    .option('-e, --exclude-dir <exclude-dir>', 'Directory/file(s) to exclude while searching', concatValues, [])
    .option('-f, --file-mask <file-mask>', `Search in files with specific extension. Example: ".txt", ".js"`)
    .option('-s, --search-results <type>', `Type of search result. "filePaths"/"lineNo". Default: filePaths`, 'filePaths');
program.parse(process.argv);
if (!program.textToSearch) {
    console.log();
    console.error('Please specify the text to search:');
    console.log(`\t${program.name()} <text-to-search>`);
    console.log();
    console.log('For example:');
    console.log(`\t${program.name()} hello`);
    console.log();
    console.log(`Run search-in-file --help to see all options.`);
    process.exit(1);
}
const textToSearch = program.textToSearch;
const searchResults = program.getOptionValue('searchResults');
const paths = !((_a = program.getOptionValue('path')) === null || _a === void 0 ? void 0 : _a.length) ? [process.cwd()] : program.getOptionValue('path');
if (searchResults && searchResults !== 'filePaths' && searchResults !== 'lineNo') {
    console.log("Invalid value for argument '--search-results'");
    console.log();
    console.log(`Run search-in-file --help to see all options.`);
    process.exit(1);
}
const options = {
    words: program.getOptionValue('word'),
    ignoreCase: program.getOptionValue('ignoreCase'),
    isRegex: program.getOptionValue('reg'),
    recursive: program.getOptionValue('recursive'),
    ignoreDir: program.getOptionValue('excludeDir'),
    fileMask: program.getOptionValue('fileMask'),
    searchResults: program.getOptionValue('searchResults'),
};
(0, _1.fileSearch)(paths, textToSearch, options)
    .then((res) => {
    if (!res.length) {
        throw new Error('No results found.');
    }
    if (program.searchResults === 'lineNo') {
        res.forEach((r) => {
            if (r.length) {
                const [firstElem] = r;
                console.log();
                console.log(`filePath: ${firstElem.filePath}`);
                console.table(r, ['line', 'lineNo']);
            }
        });
    }
    else {
        console.table(res);
    }
})
    .catch((err) => {
    console.log(err);
});
//# sourceMappingURL=data:application/json;base64,